# correlation
#cor(theta,theta.e)
# glm estimation
p = ncol(data)
item.p = matrix(NA,ncol(data), 2)
for (i in 1:p){
item.p[i,] = glm(y[,i] ~ theta.e,  family=binomial(link=logit))$coeff
}
a.e = item.p[, -1]
d.e = item.p[, 1]
# second check
# estimated model probabilities
N = nrow(data)
# linear predictor
eta.e =  t(a.e %*%t(theta.e) + matrix(d.e,p,N))
# probabilities of correct response of the model
prob.m = 1/(1+exp(-eta.e))
# column margins
margin.y.col = apply(y,2,mean)
margin.p.col = apply(prob.m,2,mean)
abs.erro.col = abs(margin.y.col -  margin.p.col)
max( abs.erro.col)
#  1.078561e-09
min(abs.erro.col)
#  2.220446e-16
mean(abs.erro.col)
# 1.008755e-10
# row margins
# column margins
margin.y.row = apply(y,1,mean)
margin.p.row = apply(prob.m,1,mean)
abs.erro.row = abs(margin.y.row -  margin.p.row)
max( abs.erro.row)
# 0.100044
min(abs.erro.row)
#  8.13469e-06
mean(abs.erro.row)
# 0.01548161
# clasical score v.s. estimated score (provisional)
y.total = apply(y,1,sum)
# adjusted score (true score)
y.t = apply(y* matrix(margin.y.col,N,p, byrow=TRUE),1,sum)
zita =  item.p[,c(2,1)]
zita = cbind(zita,rep(0,nrow(item.p)))
list(thetaPCA = theta.e ,zita =zita)
}
estimationPCA = function(data){
y.math = y = data
pca.math <- PCA(y.math,ncp=3)
pca.math$eig
barplot(pca.math$eig$eigen,main= "Eigenvalues plot of math")
plot.PCA(pca.math,cex=0.1, axes = c(1, 2), choix = "var")
var.info= pca.math$var
# first component
y.c.math = pca.math$ind$coord[,1]
theta.e = y.c.math/sd(y.c.math)
# correlation
#cor(theta,theta.e)
# glm estimation
p = ncol(data)
item.p = matrix(NA,ncol(data), 2)
for (i in 1:p){
item.p[i,] = glm(y[,i] ~ theta.e,  family=binomial(link=logit))$coeff
}
a.e = item.p[, -1]
d.e = item.p[, 1]
# second check
# estimated model probabilities
N = nrow(data)
# linear predictor
eta.e =  t(a.e %*%t(theta.e) + matrix(d.e,p,N))
# probabilities of correct response of the model
prob.m = 1/(1+exp(-eta.e))
# column margins
margin.y.col = apply(y,2,mean)
margin.p.col = apply(prob.m,2,mean)
abs.erro.col = abs(margin.y.col -  margin.p.col)
max( abs.erro.col)
#  1.078561e-09
min(abs.erro.col)
#  2.220446e-16
mean(abs.erro.col)
# 1.008755e-10
# row margins
# column margins
margin.y.row = apply(y,1,mean)
margin.p.row = apply(prob.m,1,mean)
abs.erro.row = abs(margin.y.row -  margin.p.row)
max( abs.erro.row)
# 0.100044
min(abs.erro.row)
#  8.13469e-06
mean(abs.erro.row)
# 0.01548161
# clasical score v.s. estimated score (provisional)
y.total = apply(y,1,sum)
# adjusted score (true score)
y.t = apply(y* matrix(margin.y.col,N,p, byrow=TRUE),1,sum)
zita =  item.p[,c(2,1)]
zita = cbind(zita,rep(0,nrow(item.p)))
list(thetaPCA = theta.e ,zita =zita)
}
library(mirt)
data = read.table(file = "/home/mirt/Comparaciones_Montenegro/2PL/Datasets/Test_100_10_10000.csv",header = T)
inicio = Sys.time()
fit = mirt(data,model = 1,itemtype = "2PL")
Sys.time() - inicio
inicio = Sys.time()
estimationPCA(data)
Sys.time() - inicio
library("FactoMineR", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.1")
estimationPCA = function(data){
y.math = y = data
pca.math <- PCA(y.math,ncp=3)
pca.math$eig
barplot(pca.math$eig$eigen,main= "Eigenvalues plot of math")
plot.PCA(pca.math,cex=0.1, axes = c(1, 2), choix = "var")
var.info= pca.math$var
# first component
y.c.math = pca.math$ind$coord[,1]
theta.e = y.c.math/sd(y.c.math)
# correlation
#cor(theta,theta.e)
# glm estimation
p = ncol(data)
item.p = matrix(NA,ncol(data), 2)
for (i in 1:p){
item.p[i,] = glm(y[,i] ~ theta.e,  family=binomial(link=logit))$coeff
}
a.e = item.p[, -1]
d.e = item.p[, 1]
# second check
# estimated model probabilities
N = nrow(data)
# linear predictor
eta.e =  t(a.e %*%t(theta.e) + matrix(d.e,p,N))
# probabilities of correct response of the model
prob.m = 1/(1+exp(-eta.e))
# column margins
margin.y.col = apply(y,2,mean)
margin.p.col = apply(prob.m,2,mean)
abs.erro.col = abs(margin.y.col -  margin.p.col)
max( abs.erro.col)
#  1.078561e-09
min(abs.erro.col)
#  2.220446e-16
mean(abs.erro.col)
# 1.008755e-10
# row margins
# column margins
margin.y.row = apply(y,1,mean)
margin.p.row = apply(prob.m,1,mean)
abs.erro.row = abs(margin.y.row -  margin.p.row)
max( abs.erro.row)
# 0.100044
min(abs.erro.row)
#  8.13469e-06
mean(abs.erro.row)
# 0.01548161
# clasical score v.s. estimated score (provisional)
y.total = apply(y,1,sum)
# adjusted score (true score)
y.t = apply(y* matrix(margin.y.col,N,p, byrow=TRUE),1,sum)
zita =  item.p[,c(2,1)]
zita = cbind(zita,rep(0,nrow(item.p)))
list(thetaPCA = theta.e ,zita =zita)
}
library(mirt)
data = read.table(file = "/home/mirt/Comparaciones_Montenegro/2PL/Datasets/Test_100_10_10000.csv",header = T)
inicio = Sys.time()
fit = mirt(data,model = 1,itemtype = "2PL")
Sys.time() - inicio
inicio = Sys.time()
estimationPCA(data)
Sys.time() - inicio
inicio = Sys.time()
fit = mirt(data,model = 1,itemtype = "2PL")
Sys.time() - inicio
inicio = Sys.time()
a=estimationPCA(data)
Sys.time() - inicio
data = read.table(file = "/home/mirt/Comparaciones_Montenegro/2PL/Datasets/Test_100_10_10000.csv",header = T)
View(data)
class(data)
data = as.matrix(data)
class(data)
dim(data)
#rm(list = ls())
library(mirt)
library(FactoMineR)
data = as.matrix(read.table(file = '/home/mirt/Comparaciones_Montenegro/3PL/Datasets/Test_10_1_1000.csv',header=T))
setwd("/home/mirt/Git/GrupoSICS/dev/SICSPCA/")
#dyn.load("pasoe3.so")
dyn.load("pasom3.so")
start.andrade.d = function(datos,thetas){
I = ncol(datos)
P = nrow(datos)
m = 5
#scores
T = apply(datos,1,sum)
#correlacion biserial
corr.bis = rep(NA,I)
for(i in 1:I){
corr.bis[i]  = cor(datos[,i],T,method="pearson")
}
#a inicial
a.ini = sqrt(corr.bis^2/(1-(corr.bis^2)))
#proporcion de aciertos
pi = as.vector(apply(datos,2,sum) / P)
#b inicial
b.ini = -(qnorm(pi) / corr.bis)
d.ini = -b.ini * a.ini
#c inicial
matB = matrix(b.ini,nrow = P,ncol = I,byrow = T)
matTheta = matrix(theta,nrow = P,ncol= I,byrow = F)
c.ini = colMeans(matTheta < matB & data == 1)
ini.andrade = matrix(c(a.ini,d.ini,c.ini),ncol=3)
colnames(ini.andrade) = c("a","d","c")
ini.andrade
}
patrones = function(datos){
items = ncol(datos)
comprim = apply(datos,MARGIN=1,FUN=paste,collapse="/")
freq = table(comprim)
pats = names(freq)
freq = as.vector(freq)
pats = as.numeric(unlist(lapply(pats,FUN=strsplit,split="/")))
pats = matrix(pats,ncol=items,byrow=T)
pats = cbind(pats,freq)
pats
}
indexPat = function(data,pats){
comprimData = apply(data,MARGIN=1,FUN=paste,collapse="/")
comprimPats = apply(pats[,1:ncol(data)],MARGIN=1,FUN=paste,collapse="/")
index = lapply(comprimPats,FUN = function(x) {which(x == comprimData)})
index
}
LL2 = function(zita.vec,R,fvec,pt.cuad,nitems){
.Call("Loglik",zita.vec,R,fvec,pt.cuad)
}
gradLoglik = function(zita.vec,R,fvec,pt.cuad,nitems){
.Call("grad",zita.vec,R,fvec,pt.cuad)
}
calculoThetaG = function(theta,index){
sapply(X = 1:ngroups,FUN = function(x){median(theta[index[[x]]])})
}
calculoThetaG = function(theta,index){
sapply(X = 1:ngroups,FUN = function(x){median(theta[index[[x]]])})
}
#Calculo directo de eigen (No funciona)
#Z = (data -  apply(X = data,MARGIN = 2,mean)) / apply(X = data,MARGIN = 2,sd)
#Z2 = (t(Z) %*% Z) / 1000
#eig = eigen(Z2)
#eig
pats = patrones(data)
nitems = ncol(data)
indexPat = indexPat(data = data,pats = pats)
ngroups = 40
pca.math <- PCA(data,ncp=3)
pca.math$eig[1,1]
Ycoor = pca.math$ind$coord[,1]
theta = (Ycoor - mean(Ycoor))/sd(Ycoor)
ini.vals = start.andrade.d(datos = data,thetas = theta)
ini.vals[,3] = qlogis(ini.vals[,3])
zita = ini.vals
cut = seq(0,ngroups) / ngroups
for(pp in 1:100){
limits = quantile(theta,cut)
limits[1] = limits[1] - .1
limits[ngroups + 1] = limits[ngroups +1] + .1
length(limits)
index = list()
f = numeric(ngroups)
for(i in 1:ngroups){
indG = list(unique(which((theta > limits[i]) & (theta <= limits[i+1]))))
index = append(index,indG)
f[i] = length(indG[[1]])
}
r = matrix(0,nrow = ngroups,ncol = ncol(data))
for(i in 1:ngroups){
grupoAct = index[[i]]
dataGrupo = data[grupoAct,]
if(length(grupoAct) == 1){
print(grupoAct)
r[i, ] = dataGrupo
}else{
r[i, ] = colSums(dataGrupo)
}
}
thetaG = calculoThetaG(theta,index)
zita.vec = as.vector(zita)
opt = optim(par=zita.vec,fn=LL2,gr=gradLoglik,method= "BFGS",R=r,fvec=f,pt.cuad=thetaG,nitems=nitems,control=list(maxit=20),hessian = T)
print(opt$value)
zita = matrix(opt$par,nrow=nitems,byrow=F)
zita[,1] = ifelse(abs(zita[,1]) > 10, ini.vals[,1], zita[,1])
zita[,2] = ifelse(abs(zita[,2]) > 40, ini.vals[,2], zita[,2])
zita[,3] = ifelse(abs(zita[,3]) > 600, ini.vals[,3], zita[,3])
print(zita)
w.cuad = sapply(1:length(index),function(X) length(index[[X]]))
w.cuad = w.cuad / nrow(data)
patsTheta = scoresEAP(pats = pats,zita = zita,w.cuad = w.cuad,thetaG = thetaG)
for(mm in 1:nrow(patsTheta)){
theta[indexPat[[mm]]] = patsTheta[mm,ncol(data) +1]
}
print(summary(theta))
}
scoresEAP = function(est){
pats = est$pats
npats = nrow(est$pats)
nitems = ncol(est$pats) -1
ggpat = function(pat,zita,nitems,cuad){
p = rep(0,nitems)
for(i in 1:nitems){
p[i] = gg(a = zita[i,1],d = zita[i,2],cp = qlogis(zita[i,3]),theta = cuad)
if(pat[i] == 0){
p[i] = 1 - p[i]
}
}
prod(p)
}
thetaEst = rep(0,npats)
for(j in 1:npats){
sumNum = 0
sumDen = 0
for(k in 1:41){
pat = pats[j,][1:nitems]
sumNum = sumNum + (pt.cuad[k] * w.cuad[k] * ggpat(pat = pat,zita = est$zita,nitems = nitems,cuad = pt.cuad[k]))
sumDen = sumDen + (w.cuad[k] * ggpat(pat = pat,zita = est$zita,nitems = nitems,cuad = pt.cuad[k]))
}
thetaEst[j] = sumNum / sumDen
}
ret = cbind(est$pats[,-ncol(est$pats)],thetaEst)
colnames(ret) = c(sapply(X = 1:nitems,FUN = function(x){paste("Item",x,sep = " ")}),"Score")
ret
}
#rm(list = ls())
library(mirt)
library(FactoMineR)
data = as.matrix(read.table(file = '/home/mirt/Comparaciones_Montenegro/3PL/Datasets/Test_10_1_1000.csv',header=T))
setwd("/home/mirt/Git/GrupoSICS/dev/SICSPCA/")
#dyn.load("pasoe3.so")
dyn.load("pasom3.so")
start.andrade.d = function(datos,thetas){
I = ncol(datos)
P = nrow(datos)
m = 5
#scores
T = apply(datos,1,sum)
#correlacion biserial
corr.bis = rep(NA,I)
for(i in 1:I){
corr.bis[i]  = cor(datos[,i],T,method="pearson")
}
#a inicial
a.ini = sqrt(corr.bis^2/(1-(corr.bis^2)))
#proporcion de aciertos
pi = as.vector(apply(datos,2,sum) / P)
#b inicial
b.ini = -(qnorm(pi) / corr.bis)
d.ini = -b.ini * a.ini
#c inicial
matB = matrix(b.ini,nrow = P,ncol = I,byrow = T)
matTheta = matrix(theta,nrow = P,ncol= I,byrow = F)
c.ini = colMeans(matTheta < matB & data == 1)
ini.andrade = matrix(c(a.ini,d.ini,c.ini),ncol=3)
colnames(ini.andrade) = c("a","d","c")
ini.andrade
}
patrones = function(datos){
items = ncol(datos)
comprim = apply(datos,MARGIN=1,FUN=paste,collapse="/")
freq = table(comprim)
pats = names(freq)
freq = as.vector(freq)
pats = as.numeric(unlist(lapply(pats,FUN=strsplit,split="/")))
pats = matrix(pats,ncol=items,byrow=T)
pats = cbind(pats,freq)
pats
}
indexPat = function(data,pats){
comprimData = apply(data,MARGIN=1,FUN=paste,collapse="/")
comprimPats = apply(pats[,1:ncol(data)],MARGIN=1,FUN=paste,collapse="/")
index = lapply(comprimPats,FUN = function(x) {which(x == comprimData)})
index
}
LL2 = function(zita.vec,R,fvec,pt.cuad,nitems){
.Call("Loglik",zita.vec,R,fvec,pt.cuad)
}
gradLoglik = function(zita.vec,R,fvec,pt.cuad,nitems){
.Call("grad",zita.vec,R,fvec,pt.cuad)
}
calculoThetaG = function(theta,index){
sapply(X = 1:ngroups,FUN = function(x){median(theta[index[[x]]])})
}
#Calculo directo de eigen (No funciona)
#Z = (data -  apply(X = data,MARGIN = 2,mean)) / apply(X = data,MARGIN = 2,sd)
#Z2 = (t(Z) %*% Z) / 1000
#eig = eigen(Z2)
#eig
pats = patrones(data)
nitems = ncol(data)
indexPat = indexPat(data = data,pats = pats)
ngroups = 40
pca.math <- PCA(data,ncp=3)
pca.math$eig[1,1]
Ycoor = pca.math$ind$coord[,1]
theta = (Ycoor - mean(Ycoor))/sd(Ycoor)
ini.vals = start.andrade.d(datos = data,thetas = theta)
ini.vals[,3] = qlogis(ini.vals[,3])
zita = ini.vals
cut = seq(0,ngroups) / ngroups
for(pp in 1:100){
limits = quantile(theta,cut)
limits[1] = limits[1] - .1
limits[ngroups + 1] = limits[ngroups +1] + .1
length(limits)
index = list()
f = numeric(ngroups)
for(i in 1:ngroups){
indG = list(unique(which((theta > limits[i]) & (theta <= limits[i+1]))))
index = append(index,indG)
f[i] = length(indG[[1]])
}
r = matrix(0,nrow = ngroups,ncol = ncol(data))
for(i in 1:ngroups){
grupoAct = index[[i]]
dataGrupo = data[grupoAct,]
if(length(grupoAct) == 1){
print(grupoAct)
r[i, ] = dataGrupo
}else{
r[i, ] = colSums(dataGrupo)
}
}
thetaG = calculoThetaG(theta,index)
zita.vec = as.vector(zita)
opt = optim(par=zita.vec,fn=LL2,gr=gradLoglik,method= "BFGS",R=r,fvec=f,pt.cuad=thetaG,nitems=nitems,control=list(maxit=20),hessian = T)
print(opt$value)
zita = matrix(opt$par,nrow=nitems,byrow=F)
zita[,1] = ifelse(abs(zita[,1]) > 10, ini.vals[,1], zita[,1])
zita[,2] = ifelse(abs(zita[,2]) > 40, ini.vals[,2], zita[,2])
zita[,3] = ifelse(abs(zita[,3]) > 600, ini.vals[,3], zita[,3])
print(zita)
w.cuad = sapply(1:length(index),function(X) length(index[[X]]))
w.cuad = w.cuad / nrow(data)
patsTheta = scoresEAP(pats = pats,zita = zita,w.cuad = w.cuad,thetaG = thetaG)
for(mm in 1:nrow(patsTheta)){
theta[indexPat[[mm]]] = patsTheta[mm,ncol(data) +1]
}
print(summary(theta))
}
scoresEAP(pats = pats,zita = zita,w.cuad = w.cuad,thetaG = thetaG)
#scoresEAP(pats = pats,zita = zita,w.cuad = w.cuad,thetaG = thetaG)
scoresEAP = function(pats = pats,zita = zita,w.cuad = w.cuad,thetaG = thetaG){
npats = nrow(pats)
nitems = ncol(pats) -1
ggpat = function(pat,zita,nitems,cuad){
p = rep(0,nitems)
for(i in 1:nitems){
p[i] = gg(a = zita[i,1],d = zita[i,2],cp = qlogis(zita[i,3]),theta = cuad)
if(pat[i] == 0){
p[i] = 1 - p[i]
}
}
prod(p)
}
thetaEst = rep(0,npats)
for(j in 1:npats){
sumNum = 0
sumDen = 0
for(k in 1:41){
pat = pats[j,][1:nitems]
sumNum = sumNum + (pt.cuad[k] * w.cuad[k] * ggpat(pat = pat,zita = est$zita,nitems = nitems,cuad = pt.cuad[k]))
sumDen = sumDen + (w.cuad[k] * ggpat(pat = pat,zita = est$zita,nitems = nitems,cuad = pt.cuad[k]))
}
thetaEst[j] = sumNum / sumDen
}
ret = cbind(est$pats[,-ncol(est$pats)],thetaEst)
colnames(ret) = c(sapply(X = 1:nitems,FUN = function(x){paste("Item",x,sep = " ")}),"Score")
ret
}
scoresEAP(pats = pats,zita = zita,w.cuad = w.cuad,thetaG = thetaG)
#scoresEAP(pats = pats,zita = zita,w.cuad = w.cuad,thetaG = thetaG)
scoresEAP = function(pats = pats,zita = zita,w.cuad = w.cuad,thetaG = thetaG){
npats = nrow(pats)
nitems = ncol(pats) -1
ggpat = function(pat,zita,nitems,cuad){
p = rep(0,nitems)
for(i in 1:nitems){
p[i] = gg(a = zita[i,1],d = zita[i,2],cp = qlogis(zita[i,3]),theta = cuad)
if(pat[i] == 0){
p[i] = 1 - p[i]
}
}
prod(p)
}
thetaEst = rep(0,npats)
for(j in 1:npats){
sumNum = 0
sumDen = 0
for(k in 1:41){
pat = pats[j,][1:nitems]
sumNum = sumNum + (thetaG[k] * w.cuad[k] * ggpat(pat = pat,zita = est$zita,nitems = nitems,cuad = thetaG[k]))
sumDen = sumDen + (w.cuad[k] * ggpat(pat = pat,zita = est$zita,nitems = nitems,cuad = thetaG[k]))
}
thetaEst[j] = sumNum / sumDen
}
ret = cbind(est$pats[,-ncol(est$pats)],thetaEst)
colnames(ret) = c(sapply(X = 1:nitems,FUN = function(x){paste("Item",x,sep = " ")}),"Score")
ret
}
scoresEAP(pats = pats,zita = zita,w.cuad = w.cuad,thetaG = thetaG)
